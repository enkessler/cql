= CQL (Cucumber Query Language)

{<img src="https://badge.fury.io/rb/cql.svg" alt="Gem Version" />}[http://badge.fury.io/rb/cql]
{<img src="https://travis-ci.org/enkessler/cql.svg" alt="Build Status" />}[https://travis-ci.org/enkessler/cql]
{<img src="https://coveralls.io/repos/enkessler/cql/badge.svg" alt="Coverage Status" />}[https://coveralls.io/github/enkessler/cql]
{<img src="https://codeclimate.com/github/enkessler/cql/badges/gpa.svg" />}[https://codeclimate.com/github/enkessler/cql]

CQL is a domain specific language used for querying a Cucumber test suite. It is written in ruby and powered by
the {cuke_modeler}[https://github.com/enkessler/cuke_modeler] gem. The goal of CQL is to increase the ease with
which useful information can be extraced from a modeled test suite and turned into summarized data or reports.

Some uses for example are:

* Build systems
* Reporting

== Quick Start

* Install the gem

Use the following command:

    gem install cql

Alternatively you can add it to your Gemfile if you are using bundler.

* Create a new ruby file

* The first thing that needs to be done is to create a CQL Repository. This can be done with the following line:

    require 'cql'
    cql_repo = CQL::Repository.new "/path-to-my-feature-files"

* Now that you have a repository you can write a query. A simple example is given below

    cql_repo.query do
        select name
        from features
    end

This will return a list of all of the feature names in the form of a list of hashes.

== CQL DSL
=== The 'from' clause

The *from* clause specifies what type of things that *select* will gather its values from. The *from* clause can take
class objects defined in CukeModeler as well as shorthand versions thereof. The following are some example values:

* CukeModeler::Outline  (exact class)
* outline               (singular)
* outlines              (pluralized)

Sample usage:

    cql_repo.query do
        select name
        from scenarios
    end

=== The 'select' clause

The *select* clause specifies what values will be retrieved from the things specified by *from*. Multiple values can
be given and they are deliminated by a comma. The *select* clause can take any method that the objects specified by
*from* know how to respond to.

Sample usage:
    cql_repo.query do
        # Note: '' around names are optional
        select name, 'tags', description_text
        from features
    end

=== The 'with' clause

The *with* specifies filter conditions that will reduce the number of things targeted by the by *from*. Multiple
*with* clauses can be used in a query. The *with* clause can take a block that will filter out any object for which
the block does not evaluate to true. The *with* clause can also take predefined filters (detailed below).

Sample usage:
    cql_repo.query do
        select name, tags, description_text
        from features
        with { |feature| feature.name =~ /foo/ }
        with tc lt 3
    end

The following filters are supported for all values of the *from* clause:

* tags
* tc   (tag count)

The following additional filters are supported when the *from* clause is set as 'features':

* name (exact match or regular expression)
* sc   (scenario count)
* soc  (scenario outline count)
* ssoc (scenario and scenario outline count)

The following additional filters are supported when the *from* clause is set as 'scenarios' or 'scenario_outlines':

* lc   (line count)
* line (exact match or regular expression)

For count filters, the following operators are available:

* lt   (Less than)
* lte  (Less or equals)
* gt   (Greater than)
* gte  (Greater or equal)
